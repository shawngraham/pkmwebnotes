import{EditorState as J}from"https://esm.sh/@codemirror/state";import{MatchDecorator as K,Decoration as Y,ViewPlugin as Z,WidgetType as X,EditorView as I,keymap as Q}from"https://esm.sh/@codemirror/view";import{defaultKeymap as tt}from"https://esm.sh/@codemirror/commands";import{markdown as et}from"https://esm.sh/@codemirror/lang-markdown";import{search as st,searchKeymap as nt}from"https://esm.sh/@codemirror/search";import{autocompletion as ot}from"https://esm.sh/@codemirror/autocomplete";import{syntaxTree as it}from"https://esm.sh/@codemirror/language";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const i of o.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&s(i)}).observe(document,{childList:!0,subtree:!0});function e(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(n){if(n.ep)return;n.ep=!0;const o=e(n);fetch(n.href,o)}})();class at extends X{constructor(t,e,s,n,o,i=!1){super(),this.displayText=t,this.noteTitle=e,this.noteId=s,this.openNoteCallback=n,this.createNoteCallback=o,this.isAlias=i}toDOM(){const t=document.createElement("span");return t.textContent=this.displayText,t.style.cursor="pointer",this.noteId?(t.className="cm-wikilink",this.isAlias?(t.classList.add("cm-wikilink-alias"),t.title=`Alias: "${this.displayText}" ‚Üí Links to: ${this.noteTitle}`):t.title=`Link to: ${this.noteTitle}`,t.addEventListener("mousedown",e=>{e.preventDefault(),this.openNoteCallback(this.noteId)})):(t.className="cm-wikilink cm-wikilink-broken",this.isAlias?t.title=`Create note: "${this.noteTitle}" (from alias: "${this.displayText}")`:t.title=`Create note: "${this.noteTitle}"`,t.addEventListener("mousedown",e=>{e.preventDefault(),this.createNoteCallback(this.noteTitle)})),t}ignoreEvent(){return!0}}function rt(w,t,e){const s=new K({regexp:/\[\[([^|\]/]+)(?:\|([^\]]+)|\/([^\]]+))?\]\]/g,decoration:(n,o,i)=>{const a=it(o.state).resolve(i+1,-1);if(a.type.name.includes("Code")||a.type.name.includes("Comment"))return null;const c=o.state.selection.main.head;if(c>=i&&c<=i+n[0].length)return null;const d=Object.values(w).reduce((v,k)=>(v[k.title.toLowerCase()]=k.id,v),{}),p=n[1].trim(),h=n[2]?n[2].trim():null,u=n[3]?n[3].trim():null;let g,l,m,b=!1;return h?(m=p,g=l=h,w[m]||(m=null)):u?(g=p,l=u,m=d[g.toLowerCase()],b=!0):(g=l=p,m=d[g.toLowerCase()]),Y.replace({widget:new at(l,g,m,t,e,b)})}});return Z.define(n=>({decorations:s.createDeco(n),update(o){(o.docChanged||o.viewportChanged||o.selectionSet)&&(this.decorations=s.updateDeco(o,this.decorations))}}),{decorations:n=>n.decorations})}class ct{constructor(){this.pyodide=null,this.isLoading=!1,this.noteStates=new Map,this.executionCounters=new Map,this.initPromise=this.initPyodide(),this.statusUpdateCallback=null}setStatusCallback(t){this.statusUpdateCallback=t}updateStatus(t,e){this.statusUpdateCallback&&this.statusUpdateCallback(t,e)}async initPyodide(){if(this.pyodide||this.isLoading)return this.pyodide;try{return this.isLoading=!0,this.updateStatus("loading","Loading Python..."),console.log("üêç Pyodide loading..."),this.pyodide=await loadPyodide({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.25.1/full/"}),console.log("üêç Pyodide loaded. Please wait while we install some packages..."),this.updateStatus("loading","Installing packages..."),await this.pyodide.loadPackage(["pandas","numpy","matplotlib","micropip"]),console.log("‚úÖ Pyodide and packages loaded successfully"),await this.pyodide.runPythonAsync(`
import matplotlib.pyplot as plt
plt.ioff()  # Turn off interactive mode
            `),this.updateStatus("ready","Ready"),this.pyodide}catch(t){throw console.error("‚ùå Pyodide failed to load:",t),this.updateStatus("error","Failed to load"),t}finally{this.isLoading=!1}}async ensureReady(){return this.pyodide||await this.initPromise,this.pyodide}getOrCreateNoteState(t){if(!this.noteStates.has(t)){const e=this.pyodide.globals.get("dict")();this.pyodide.runPython(`
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import StringIO, BytesIO
import json
import csv
import micropip
import base64

plt.ioff()

# Helper to convert a Matplotlib figure to a base64 PNG string
# This function MUST be defined in each note's namespace to be accessible
def _convert_fig_to_base64(fig):
    buf = BytesIO()
    fig.savefig(buf, format='png', bbox_inches='tight', dpi=100)
    plt.close(fig)
    buf.seek(0)
    return base64.b64encode(buf.read()).decode('utf-8')
            `,{globals:e}),this.noteStates.set(t,e),console.log(`üóÇÔ∏è Created isolated state for note ${t}`)}return this.noteStates.get(t)}clearNoteState(t){this.noteStates.has(t)&&(this.noteStates.get(t).destroy(),this.noteStates.delete(t),this.executionCounters.delete(t),console.log(`üóëÔ∏è Cleared state for note ${t}`))}getNextExecutionNumber(t){const s=(this.executionCounters.get(t)||0)+1;return this.executionCounters.set(t,s),s}getCurrentExecutionNumber(t){return this.executionCounters.get(t)||0}async executeCode(t,e,s){await this.ensureReady();const n=this.getOrCreateNoteState(e),o=this.getNextExecutionNumber(e);let i="",r=null,a=[];this.pyodide.setStdout({batched:c=>{i+=c+`
`}});try{await this.pyodide.runPythonAsync(`
_captured_figures = []
_original_show = plt.show

def _capture_show(*args, **kwargs):
    figs = [plt.figure(i) for i in plt.get_fignums()]
    for fig in figs:
        # This will now correctly find the helper function in the note's namespace
        _captured_figures.append(_convert_fig_to_base64(fig))
    plt.close('all')

plt.show = _capture_show
            `,{globals:n});const c=t.match(/^\s*#\s*data_url:\s*['"]?(https?:\/\/[^\s\r\n'"]+)['"]?/m);if(c){console.log("üåê Found data_url directive:",c[1]);const p=c[1].trim(),h=await fetch(p);if(!h.ok)throw new Error(`Failed to fetch data: ${h.status} ${h.statusText}`);const u=await h.text();console.log(`üìä Fetched ${u.length} characters of data`),n.set("fetched_data",u);const g=t.replace(/^\s*#\s*data_url:.*$/m,"").trim();g&&(r=await this.pyodide.runPythonAsync(g,{globals:n})),n.delete("fetched_data")}else r=await this.pyodide.runPythonAsync(t,{globals:n});r&&typeof r.toJs=="function"&&r.type==="<class 'matplotlib.figure.Figure'>"&&(a.push(n.get("_convert_fig_to_base64")(r)),r.destroy(),r=null);const d=await this.pyodide.runPythonAsync(`
figures = _captured_figures.copy()
_captured_figures.clear()
figures
            `,{globals:n});d&&d.length>0&&(a.push(...d.toJs()),d.destroy()),await this.pyodide.runPythonAsync(`
plt.show = _original_show
            `,{globals:n})}catch(c){throw c}finally{this.pyodide.setStdout({})}return{result:r,stdout:i.trim(),executionNumber:o,blockIndex:s,plots:a}}formatOutput(t,e,s,n){let o="",i="";if(o+=`<div class="output-header">
            <div class="execution-info"><span class="execution-number">[${s}]</span> <span>Executed</span></div>
            <button class="copy-output-btn" title="Copy output to clipboard">Copy</button>
        </div>`,e&&(o+='<div class="output-label">Output:</div>',o+=`<pre class="output-text">${this.escapeHtml(e)}</pre>`,i+=e+`
`),n&&n.length>0&&n.forEach((a,c)=>{o+='<div class="plot-container">',n.length>1&&(o+=`<div class="output-label">Plot ${c+1}:</div>`),o+=`<img src="data:image/png;base64,${a}" alt="Plot ${c+1}" />`,o+=`<div class="plot-actions">
                    <button class="copy-plot-btn" title="Copy image to clipboard" data-plot-base64="${a}">Copy Image</button>
                    <button class="download-plot-btn" title="Download image as PNG" data-plot-base64="${a}" data-filename="plot_${s}_${c+1}.png">Download</button>
                </div>`,o+="</div>"}),t!=null){let a="";try{typeof t.to_html=="function"?(o+='<div class="output-label">Result:</div>',o+=t.to_html(),a=t.to_string?t.to_string():String(t),t.destroy()):typeof t.toString=="function"&&(a=t.toString(),a!=="undefined"&&a.trim()!==""&&(o+='<div class="output-label">Result:</div>',o+=`<pre class="output-result">${this.escapeHtml(a)}</pre>`))}catch{}a.trim()!==""&&(i+=`Result:
${a}`)}return{html:o||"<pre>Code executed successfully.</pre>",rawText:i.trim()}}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}}const lt="modulepreload",dt=function(w){return"/"+w},B={},ut=function(t,e,s){let n=Promise.resolve();if(e&&e.length>0){let a=function(c){return Promise.all(c.map(d=>Promise.resolve(d).then(p=>({status:"fulfilled",value:p}),p=>({status:"rejected",reason:p}))))};document.getElementsByTagName("link");const i=document.querySelector("meta[property=csp-nonce]"),r=i?.nonce||i?.getAttribute("nonce");n=a(e.map(c=>{if(c=dt(c),c in B)return;B[c]=!0;const d=c.endsWith(".css"),p=d?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${p}`))return;const h=document.createElement("link");if(h.rel=d?"stylesheet":lt,d||(h.as="script"),h.crossOrigin="",h.href=c,r&&h.setAttribute("nonce",r),document.head.appendChild(h),d)return new Promise((u,g)=>{h.addEventListener("load",u),h.addEventListener("error",()=>g(new Error(`Unable to preload CSS for ${c}`)))})}))}function o(i){const r=new Event("vite:preloadError",{cancelable:!0});if(r.payload=i,window.dispatchEvent(r),!r.defaultPrevented)throw i}return n.then(i=>{for(const r of i||[])r.status==="rejected"&&o(r.reason);return t().catch(o)})};class ht{constructor(){this.webR=null,this.isLoading=!1,this.initPromise=this.initWebR(),this.statusUpdateCallback=null,this.executionCounter=0}setStatusCallback(t){this.statusUpdateCallback=t}updateStatus(t,e){this.statusUpdateCallback&&this.statusUpdateCallback(t,e)}async initWebR(){if(this.webR||this.isLoading)return this.webR;try{this.isLoading=!0,this.updateStatus("loading","Loading R..."),console.log("¬ÆÔ∏è webR loading...");const{WebR:t}=await ut(async()=>{const{WebR:e}=await import("https://webr.r-wasm.org/latest/webr.mjs");return{WebR:e}},[]);return this.webR=new t,await this.webR.init(),console.log("¬ÆÔ∏è webR loaded. Installing packages..."),this.updateStatus("loading","Installing packages..."),await this.webR.installPackages(["ggplot2","dplyr"]),console.log("‚úÖ webR and packages loaded successfully"),this.updateStatus("ready","Ready"),this.webR}catch(t){throw console.error("‚ùå webR failed to load:",t),this.updateStatus("error","Failed to load"),t}finally{this.isLoading=!1}}async ensureReady(){return this.webR||await this.initPromise,this.webR}async executeCode(t){await this.ensureReady(),this.executionCounter++;const e={stdout:"",stderr:"",plots:[],result:null,executionNumber:this.executionCounter};let s,n;try{s=await new this.webR.Shelter;const o=`print({ ${t} })`;n=await s.captureR(o),n.output.forEach(i=>{i.type==="stdout"?e.stdout+=i.data+`
`:i.type==="stderr"&&(e.stderr+=i.data+`
`)});for(const i of n.images){const r=document.createElement("canvas");r.width=i.width,r.height=i.height,r.getContext("2d").drawImage(i,0,0),e.plots.push(r.toDataURL("image/png").split(",")[1])}}catch(o){e.stderr=o.message}finally{n&&n.result&&this.webR.destroy(n.result),s&&await s.purge()}return e}formatOutput(t){let e="",s="";return e+=`<div class="output-header">
            <div class="execution-info"><span class="execution-number">[${t.executionNumber}]</span> <span>Executed</span></div>
            <button class="copy-output-btn" title="Copy output to clipboard">Copy</button>
        </div>`,t.stderr&&t.stderr.trim()&&(e+=`<pre class="output-error">${this.escapeHtml(t.stderr.trim())}</pre>`,s+=`Error:
${t.stderr.trim()}
`),t.stdout&&t.stdout.trim()&&(e+='<div class="output-label">Output & Result:</div>',e+=`<pre class="output-text">${this.escapeHtml(t.stdout.trim())}</pre>`,s+=t.stdout.trim()+`
`),t.plots&&t.plots.length>0&&t.plots.forEach((o,i)=>{e+='<div class="plot-container">',t.plots.length>1&&(e+=`<div class="output-label">Plot ${i+1}:</div>`),e+=`<img src="data:image/png;base64,${o}" alt="R Plot ${i+1}" />`,e+=`<div class="plot-actions">
                    <button class="copy-plot-btn" title="Copy image to clipboard" data-plot-base64="${o}">Copy Image</button>
                    <button class="download-plot-btn" title="Download image as PNG" data-plot-base64="${o}" data-filename="r_plot_${t.executionNumber}_${i+1}.png">Download</button>
                </div>`,e+="</div>"}),{html:e||"<pre>Code executed successfully.</pre>",rawText:s.trim()}}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}}class N{constructor(t="Untitled",e=""){this.id=this.generateId(),this.title=t,this.content=e||this.generateDefaultContent(t),this.created=Date.now(),this.modified=Date.now()}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}generateDefaultContent(t){const e=new Date().toISOString();return`---
title: ${t}
created: ${e}
tags: []
---

# ${t}

`}parseMetadata(){const t=this.content.match(/^---\n([\s\S]*?)\n---/);if(!t)return{title:this.title,tags:[],created:new Date(this.created).toISOString()};const e=t[1],s={};return e.split(`
`).forEach(n=>{const o=n.indexOf(":");if(o>0){const i=n.substring(0,o).trim();let r=n.substring(o+1).trim();if(i.startsWith("#"))return;r.startsWith("[")&&r.endsWith("]")?r=r.slice(1,-1).split(",").map(a=>a.trim().replace(/['"]/g,"")):r=r.replace(/^['"]|['"]$/g,""),s[i]=r}}),{title:s.title||this.title,tags:Array.isArray(s.tags)?s.tags:[],created:s.created||new Date(this.created).toISOString(),...s}}update(t,e=!1){this.content=t,e&&(this.modified=Date.now());const s=this.parseMetadata();this.title,this.title=s.title||"Untitled"}getContentWithoutMetadata(){return this.content.replace(/^---\n[\s\S]*?\n---\n?/,"")}getPreview(){const t=/\[\[(?:[^|\]]+\|)?([^\]]+)\]\]/g;return this.getContentWithoutMetadata().replace(/^#+\s*/gm,"").replace(/\*\*(.*?)\*\*/g,"$1").replace(/\*(.*?)\*/g,"$1").replace(t,"$1").replace(/\^([a-zA-Z0-9-]+)/g,"").trim().substring(0,100)}getBlockContent(t){const s=this.getContentWithoutMetadata().split(`
`),n=new RegExp(`\\^${t}$`),o=s.find(i=>n.test(i.trim()));return o?o.replace(n,"").trim():null}getOutgoingLinks(){const t=new Set,e=/\[\[([^\]|]+)(?:\|[^\]]*)?\]\]/g;let s;for(;(s=e.exec(this.content))!==null;){const n=s[1].trim();t.add(n)}return[...t]}ensureInternalFormat(t){return t}}class pt{constructor(t){this.updateNotes(t)}updateNotes(t){this.notes=t,this.backlinks={};const e=/\[\[([^|\]]+)\|([^\]]+)\]\]/g;for(const s of Object.values(this.notes)){let n;const o=this.ensureInternalFormat(s.content);for(;(n=e.exec(o))!==null;){const i=n[1],r=this.notes[i];if(r){const a=r.title;this.backlinks[a]||(this.backlinks[a]=[]),this.backlinks[a].push({noteId:s.id,noteTitle:s.title,context:this._getContext(o,n)})}}}}ensureInternalFormat(t){const e=Object.values(this.notes).reduce((s,n)=>(s[n.title.toLowerCase()]=n.id,s),{});return t.replace(/\[\[([^\]|]+)\]\]/g,(s,n)=>{const o=n.trim(),i=e[o.toLowerCase()];return i?`[[${i}|${o}]]`:s})}getBacklinks(t){return this.backlinks[t]||[]}_sanitize(t){return document.createTextNode(t).nodeValue}_getContext(t,e){const s=e.index,n=e[0],o=e[2],i=t.substring(0,s),r=t.substring(s+n.length),a=i.trim().split(/\s+/),c=a.slice(-3).join(" "),d=a.length>3?"... ":"",p=r.trim().split(/\s+/),h=p.slice(0,3).join(" "),u=p.length>3?" ...":"",g=this._sanitize(c),l=`<strong>${this._sanitize(o)}</strong>`,m=this._sanitize(h);return`${d}${g} ${l} ${m}${u}`}}class gt{constructor(t){this.notes=t,this.svg=null,this.simulation=null,this.currentNoteId=null,this.currentSteps=1}updateNotes(t){this.notes=t}createGraph(t,e,s=1){this.currentNoteId=e,this.currentSteps=s;const n=this.notes[e];if(!n)return;t.innerHTML="";const o=document.createElement("div");o.className="graph-controls",o.style.cssText="margin-bottom: 8px; display: flex; justify-content: center; gap: 4px;";for(let l=1;l<=3;l++){const m=document.createElement("button");m.textContent=`${l} step${l>1?"s":""}`,m.className="step-btn",m.style.cssText=`
                padding: 4px 8px; 
                font-size: 11px; 
                border: 1px solid var(--border); 
                border-radius: 4px; 
                background: ${l===s?"var(--primary)":"var(--surface)"}; 
                color: ${l===s?"white":"var(--text)"}; 
                cursor: pointer;
                transition: all 0.2s;
            `,m.addEventListener("click",()=>{this.createGraph(t,e,l)}),o.appendChild(m)}t.appendChild(o);const i=document.createElement("div");i.className="graph-svg-container",t.appendChild(i);const r=t.clientWidth||260,a=200;this.svg=d3.select(i).append("svg").attr("width",r).attr("height",a).style("background","var(--background)").style("border-radius","6px");const{nodes:c,links:d}=this.prepareMultiStepGraphData(n,s);if(c.length===0){this.svg.append("text").attr("x",r/2).attr("y",a/2).attr("text-anchor","middle").attr("fill","var(--text-muted)").style("font-size","14px").text("No connections");return}const p=s===1?60:s===2?50:40,h=s===1?-200:s===2?-150:-100;this.simulation=d3.forceSimulation(c).force("link",d3.forceLink(d).id(l=>l.id).distance(p)).force("charge",d3.forceManyBody().strength(h)).force("center",d3.forceCenter(r/2,a/2)).force("collision",d3.forceCollide().radius(l=>l.isCurrent?25:l.step===1?20:15));const u=this.svg.append("g").selectAll("line").data(d).enter().append("line").attr("stroke",l=>l.step===1?"var(--primary)":l.step===2?"var(--text-muted)":"var(--border)").attr("stroke-width",l=>l.step===1?2:1).attr("opacity",l=>l.step===1?.8:l.step===2?.6:.4),g=this.svg.append("g").selectAll("g").data(c).enter().append("g").call(d3.drag().on("start",(l,m)=>this.dragstarted(l,m)).on("drag",(l,m)=>this.dragged(l,m)).on("end",(l,m)=>this.dragended(l,m)));g.append("circle").attr("r",l=>l.isCurrent?12:l.step===1?10:l.step===2?8:6).attr("fill",l=>l.isCurrent?"var(--primary)":l.step===1?"var(--success)":l.step===2?"var(--warning)":"var(--text-muted)").attr("stroke",l=>l.isCurrent?"var(--primary)":"var(--border)").attr("stroke-width",l=>l.isCurrent?3:2).attr("opacity",l=>l.step===3?.7:1).style("cursor",l=>l.isCurrent?"default":"pointer"),g.append("text").text(l=>this.truncateText(l.title,l.step===1?15:l.step===2?12:10)).attr("font-size",l=>l.isCurrent?"11px":l.step===1?"10px":"9px").attr("text-anchor","middle").attr("dy",l=>l.isCurrent?-18:l.step===1?-16:l.step===2?-14:-12).attr("fill",l=>l.step===3?"var(--text-muted)":"var(--text)").attr("font-weight",l=>l.isCurrent?"bold":l.step===1?"500":"normal").style("pointer-events","none").style("user-select","none"),g.filter(l=>!l.isCurrent&&l.step>1).append("text").text(l=>l.step).attr("font-size","8px").attr("text-anchor","middle").attr("dy",3).attr("fill","white").style("pointer-events","none").style("user-select","none").style("font-weight","bold"),g.filter(l=>!l.isCurrent).on("click",(l,m)=>{l.stopPropagation(),this.onNodeClick&&this.onNodeClick(m.id)}),this.simulation.on("tick",()=>{u.attr("x1",l=>l.source.x).attr("y1",l=>l.source.y).attr("x2",l=>l.target.x).attr("y2",l=>l.target.y),g.attr("transform",l=>`translate(${l.x},${l.y})`)}),s>1&&this.addStepLegend(r,a)}addStepLegend(t,e){const s=this.svg.append("g").attr("class","step-legend").attr("transform",`translate(10, ${e-40})`),n=[{step:0,label:"Current",color:"var(--primary)"},{step:1,label:"1 step",color:"var(--success)"},{step:2,label:"2 steps",color:"var(--warning)"},{step:3,label:"3 steps",color:"var(--text-muted)"}].filter(i=>i.step===0||i.step<=this.currentSteps),o=s.selectAll(".legend-item").data(n).enter().append("g").attr("class","legend-item").attr("transform",(i,r)=>`translate(0, ${r*12})`);o.append("circle").attr("r",4).attr("fill",i=>i.color).attr("cx",5),o.append("text").text(i=>i.label).attr("x",12).attr("y",0).attr("dy","0.35em").attr("font-size","9px").attr("fill","var(--text-muted)")}prepareMultiStepGraphData(t,e=1){const s=[],n=[],o=new Map,i=new Set;Object.values(this.notes).reduce((r,a)=>(r[a.title.toLowerCase()]=a,r),{}),s.push({id:t.id,title:t.title,isCurrent:!0,step:0}),i.add(t.id),o.set(0,new Set([t.id]));for(let r=1;r<=e;r++){const a=new Set;(o.get(r-1)||new Set).forEach(d=>{const p=this.notes[d];if(!p)return;p.getOutgoingLinks().forEach(u=>{const g=this.notes[u];g&&!i.has(g.id)&&(s.push({id:g.id,title:g.title,isCurrent:!1,step:r}),i.add(g.id),a.add(g.id)),g&&n.push({source:d,target:g.id,type:"outgoing",step:r})}),Object.values(this.notes).forEach(u=>{u.id!==d&&u.getOutgoingLinks().includes(d)&&(i.has(u.id)||(s.push({id:u.id,title:u.title,isCurrent:!1,step:r}),i.add(u.id),a.add(u.id)),n.push({source:u.id,target:d,type:"incoming",step:r}))})}),o.set(r,a)}return{nodes:s,links:n}}prepareCompleteNetworkData(){const t=[],e=[];return Object.values(this.notes).forEach(s=>{t.push({id:s.id,title:s.title,isCurrent:s.id===this.currentNoteId,created:s.created,modified:s.modified,step:s.id===this.currentNoteId?0:this.calculateStepsFromCurrent(s.id)})}),Object.values(this.notes).forEach(s=>{s.getOutgoingLinks().forEach(o=>{const i=Object.values(this.notes).find(r=>r.title.toLowerCase()===o.toLowerCase());i&&(e.find(a=>a.source===s.id&&a.target===i.id||a.source===i.id&&a.target===s.id)||e.push({source:s.id,target:i.id,type:"wikilink",bidirectional:!1,step:1}))})}),{nodes:t,links:e}}calculateStepsFromCurrent(t){if(!this.currentNoteId||t===this.currentNoteId)return 0;const e=new Set,s=[{noteId:this.currentNoteId,steps:0}];for(e.add(this.currentNoteId);s.length>0;){const{noteId:n,steps:o}=s.shift(),i=this.notes[n];if(!i)continue;const r=i.getOutgoingLinks(),a=new Set;r.forEach(c=>{const d=Object.values(this.notes).find(p=>p.title.toLowerCase()===c.toLowerCase());d&&a.add(d.id)}),Object.values(this.notes).forEach(c=>{c.id!==n&&c.getOutgoingLinks().some(p=>p.toLowerCase()===i.title.toLowerCase())&&a.add(c.id)});for(const c of a){if(c===t)return o+1;!e.has(c)&&o<3&&(e.add(c),s.push({noteId:c,steps:o+1}))}}return 1/0}prepareGraphData(t){return this.prepareMultiStepGraphData(t,1)}exportNetworkCSV(t,e=!0,s=!1,n=!0,o=null){const i=this.notes[t];if(!i)return null;const r=o!==null?o:s?null:this.currentSteps,{nodes:a,links:c}=s?this.prepareCompleteNetworkData():this.prepareMultiStepGraphData(i,r||1),d=this.generateStandardNetworkCSVs(a,c,t,e,r);let p=null;n&&s&&(p=this.generateIsolatedNotesCSV());const h=this.generateNetworkStats(t,a,c,s,n,r);return{edgesCSV:d.edgesCSV,nodesCSV:d.nodesCSV,statsCSV:h,isolatedCSV:p}}generateStandardNetworkCSVs(t,e,s,n,o=null){const i=n?"source_id,target_id,source_title,target_title,link_type,step,source_created,target_created,source_modified,target_modified,source_word_count,target_word_count,source_outgoing_links,target_outgoing_links,source_tags,target_tags,weight":"source_id,target_id,source_title,target_title,link_type,step",r=e.map(h=>{const u=this.notes[h.source],g=this.notes[h.target];if(n&&u&&g){const l=u.getContentWithoutMetadata(),m=g.getContentWithoutMetadata(),b=l.trim()?l.trim().split(/\s+/).length:0,v=m.trim()?m.trim().split(/\s+/).length:0,k=u.getOutgoingLinks().length,C=g.getOutgoingLinks().length,$=u.parseMetadata(),E=g.parseMetadata(),_=Array.isArray($.tags)?$.tags.join(";"):"",S=Array.isArray(E.tags)?E.tags.join(";"):"";return`"${h.source}","${h.target}","${this.escapeCsvValue(u.title)}","${this.escapeCsvValue(g.title)}","${h.type}",${h.step||1},"${new Date(u.created).toISOString()}","${new Date(g.created).toISOString()}","${new Date(u.modified).toISOString()}","${new Date(g.modified).toISOString()}",${b},${v},${k},${C},"${this.escapeCsvValue(_)}","${this.escapeCsvValue(S)}",1`}else{const l=u?u.title:"Unknown",m=g?g.title:"Unknown";return`"${h.source}","${h.target}","${this.escapeCsvValue(l)}","${this.escapeCsvValue(m)}","${h.type}",${h.step||1}`}}),a=[i,...r].join(`
`),c=n?"id,title,is_focal,node_type,step,created,modified,word_count,character_count,outgoing_links_count,incoming_links_count,tags,first_paragraph,last_modified_days_ago":"id,title,is_focal,node_type,step",d=t.map(h=>{const u=this.notes[h.id];if(n&&u){const g=u.getContentWithoutMetadata(),l=g.trim()?g.trim().split(/\s+/).length:0,m=g.length,b=u.getOutgoingLinks().length,v=Object.values(this.notes).filter(S=>S.id!==u.id&&S.getOutgoingLinks().some(L=>L.toLowerCase()===u.title.toLowerCase())).length,k=u.parseMetadata(),C=Array.isArray(k.tags)?k.tags.join(";"):"",$=g.split(`

`).filter(S=>S.trim()),E=$.length>0?$[0].replace(/\n/g," ").substring(0,100):"",_=Math.floor((Date.now()-u.modified)/(1e3*60*60*24));return`"${h.id}","${this.escapeCsvValue(h.title)}","${h.id===s}","${h.id===s?"focal":"connected"}",${h.step||0},"${new Date(u.created).toISOString()}","${new Date(u.modified).toISOString()}",${l},${m},${b},${v},"${this.escapeCsvValue(C)}","${this.escapeCsvValue(E)}",${_}`}else return`"${h.id}","${this.escapeCsvValue(h.title)}","${h.id===s}","${h.id===s?"focal":"connected"}",${h.step||0}`}),p=[c,...d].join(`
`);return{edgesCSV:a,nodesCSV:p}}generateNetworkStats(t,e,s,n=!1,o=!0,i=null){const r=this.notes[t],a=e.length,c=s.length,d=n&&o?this.findIsolatedNotes():[],p=d.length,h=Object.keys(this.notes).length,u=h-p,g={};e.forEach(f=>{const y=f.step||0;g[y]=(g[y]||0)+1});const l={};s.forEach(f=>{const y=f.step||1;l[y]=(l[y]||0)+1});const m=n?s.filter(f=>f.source===t).length:s.filter(f=>f.type==="outgoing").length,b=n?s.filter(f=>f.target===t).length:s.filter(f=>f.type==="incoming").length,v=a*(a-1),k=v>0?c*2/v:0,C=this.buildAdjacencyList(e,s),$=this.calculateBetweennessCentrality(e,C),E=Object.entries($).sort(([,f],[,y])=>y-f).slice(0,10).map(([f,y])=>{const M=this.notes[f],D=e.find(G=>G.id===f);return{nodeId:f,title:M?M.title:"Unknown",centrality:y.toFixed(4),step:D?D.step:"unknown"}}),_=this.detectCommunitiesLouvain(e,C),S=this.analyzeCommunities(_,e),L={};s.forEach(f=>{L[f.source]=(L[f.source]||0)+1,L[f.target]=(L[f.target]||0)+1});const T=Object.values(L),j=T.length>0?T.reduce((f,y)=>f+y,0)/T.length:0,A=T.length>0?Math.max(...T):0,H=n?this.findConnectedComponents(C):1,F=n?this.calculateNetworkDiameter(C):"N/A",W="metric,value,description",q=[`"network_type","${n?"complete":"ego"}","Type of network exported"`,`"max_steps","${i||(n?"all":this.currentSteps)}","Maximum steps from focal note"`,`"focal_note_id","${t}","ID of the focal note"`,`"focal_note_title","${this.escapeCsvValue(r.title)}","Title of the focal note"`,`"total_notes_in_vault",${h},"Total notes in your vault"`,`"connected_notes",${u},"Notes with at least one wikilink"`,`"isolated_notes",${p},"Notes with no wikilinks (orphans)"`,`"isolation_rate",${(p/h*100).toFixed(1)}%,"Percentage of notes that are isolated"`,`"nodes_in_network",${a},"Notes included in network export"`,`"total_edges",${c},"Total number of connections"`,`"outgoing_edges_from_focal",${m},"Links from focal note to others"`,`"incoming_edges_to_focal",${b},"Links from others to focal note"`,`"network_density",${k.toFixed(4)},"Ratio of actual to possible connections"`,`"average_degree",${j.toFixed(2)},"Average connections per note"`,`"max_degree",${A},"Maximum connections for any note"`,`"connected_components",${H},"Number of disconnected subgraphs"`,`"network_diameter","${F}","Longest shortest path in network"`,`"num_communities",${S.numCommunities},"Number of detected communities"`,`"modularity",${S.modularity.toFixed(4)},"Community structure quality (higher = better separation)"`,`"largest_community_size",${S.largestCommunitySize},"Size of the largest community"`,`"network_coverage",${(a/h*100).toFixed(1)}%,"Percentage of vault included in this network"`,`"export_timestamp","${new Date().toISOString()}","When this export was generated"`],O=[];for(let f=0;f<=3;f++){const y=g[f]||0;if(y>0||f===0){const M=f===0?"focal note":`${f} step${f>1?"s":""} from focal`;O.push(`"nodes_at_step_${f}",${y},"Number of nodes ${M}"`)}}const P=[];for(let f=1;f<=3;f++){const y=l[f]||0;y>0&&P.push(`"edges_at_step_${f}",${y},"Connections at step ${f}"`)}const V=E.map((f,y)=>`"betweenness_rank_${y+1}","${f.nodeId}: ${this.escapeCsvValue(f.title)} (${f.centrality}) [step ${f.step}]","Node with ${y===0?"highest":"rank "+(y+1)} betweenness centrality"`),z=S.communities.map((f,y)=>`"community_${y+1}","${f.nodes.join(";")}","Community ${y+1} members (${f.size} nodes)"`),U=d.slice(0,10).map((f,y)=>`"isolated_note_${y+1}","${f.id}: ${this.escapeCsvValue(f.title)}","Isolated note example ${y+1}"`);return[W,...q,...O,...P,...V,...z,...U].join(`
`)}findIsolatedNotes(){const t=new Set;return Object.values(this.notes).forEach(s=>{const n=s.getOutgoingLinks();n.length>0&&(t.add(s.id),n.forEach(i=>{const r=Object.values(this.notes).find(a=>a.title.toLowerCase()===i.toLowerCase());r&&t.add(r.id)})),Object.values(this.notes).some(i=>i.id===s.id?!1:i.getOutgoingLinks().some(r=>r.toLowerCase()===s.title.toLowerCase()))&&t.add(s.id)}),Object.values(this.notes).filter(s=>!t.has(s.id))}generateIsolatedNotesCSV(){const t=this.findIsolatedNotes(),e="id,title,created,modified,word_count,character_count,tags,first_paragraph,last_modified_days_ago,potential_tags",s=t.map(n=>{const o=n.getContentWithoutMetadata(),i=o.trim()?o.trim().split(/\s+/).length:0,r=o.length,a=n.parseMetadata(),c=Array.isArray(a.tags)?a.tags.join(";"):"",d=o.split(`

`).filter(g=>g.trim()),p=d.length>0?d[0].replace(/\n/g," ").substring(0,150):"",h=Math.floor((Date.now()-n.modified)/(1e3*60*60*24)),u=this.extractPotentialTags(o);return`"${n.id}","${this.escapeCsvValue(n.title)}","${new Date(n.created).toISOString()}","${new Date(n.modified).toISOString()}",${i},${r},"${this.escapeCsvValue(c)}","${this.escapeCsvValue(p)}",${h},"${this.escapeCsvValue(u.join(";"))}"`});return[e,...s].join(`
`)}extractPotentialTags(t){const e=new Set;return(t.match(/\b[A-Z][a-z]+\b/g)||[]).forEach(i=>{i.length>3&&!["The","This","That","When","Where","What","Why","How"].includes(i)&&e.add(i)}),(t.match(/#\w+/g)||[]).forEach(i=>e.add(i.substring(1))),(t.match(/"([^"]+)"/g)||[]).forEach(i=>{const r=i.replace(/"/g,"");r.length>3&&r.length<30&&e.add(r)}),Array.from(e).slice(0,5)}truncateText(t,e){return t.length<=e?t:t.substring(0,e-3)+"..."}dragstarted(t,e){t.active||this.simulation.alphaTarget(.3).restart(),e.fx=e.x,e.fy=e.y}dragged(t,e){e.fx=t.x,e.fy=t.y}dragended(t,e){t.active||this.simulation.alphaTarget(0),e.fx=null,e.fy=null}destroy(){this.simulation&&(this.simulation.stop(),this.simulation=null),this.svg&&(this.svg.remove(),this.svg=null)}buildAdjacencyList(t,e){const s={};return t.forEach(n=>{s[n.id]=[]}),e.forEach(n=>{s[n.source].push(n.target),s[n.target].push(n.source)}),Object.keys(s).forEach(n=>{s[n]=[...new Set(s[n])]}),s}calculateBetweennessCentrality(t,e){const s={},n=t.map(r=>r.id);n.forEach(r=>{s[r]=0}),n.forEach(r=>{const a={},c={},d=[r],p=[];for(n.forEach(u=>{a[u]=-1,c[u]=[]}),a[r]=0;d.length>0;){const u=d.shift();p.push(u),e[u].forEach(g=>{a[g]<0&&(d.push(g),a[g]=a[u]+1),a[g]===a[u]+1&&c[g].push(u)})}const h={};for(n.forEach(u=>{h[u]=0});p.length>0;){const u=p.pop();c[u].forEach(g=>{h[g]+=(1+h[u])/c[u].length}),u!==r&&(s[u]+=h[u])}});const o=n.length,i=o>2?2/((o-1)*(o-2)):1;return Object.keys(s).forEach(r=>{s[r]*=i}),s}detectCommunitiesLouvain(t,e){const s=t.map(c=>c.id),n={};s.forEach((c,d)=>{n[c]=d});const o=Object.values(e).reduce((c,d)=>c+d.length,0)/2;let i=!0,r=0;const a=50;for(;i&&r<a;)i=!1,r++,s.forEach(c=>{const d=n[c],p=e[c],h=new Set;p.forEach(l=>{h.add(n[l])});let u=d,g=0;h.forEach(l=>{if(l!==d){const m=this.calculateModularityGain(c,d,l,n,e,o);m>g&&(g=m,u=l)}}),u!==d&&g>0&&(n[c]=u,i=!0)});return n}calculateModularityGain(t,e,s,n,o,i){const r=o[t],a=r.length;let c=0,d=0;r.forEach(g=>{n[g]===e&&c++,n[g]===s&&d++});const p=this.getCommunityDegree(e,n,o),h=this.getCommunityDegree(s,n,o);return(d-c)/(2*i)-a*(h-p)/(4*i*i)}getCommunityDegree(t,e,s){let n=0;return Object.keys(e).forEach(o=>{e[o]===t&&(n+=s[o].length)}),n}analyzeCommunities(t,e){const s={};Object.entries(t).forEach(([c,d])=>{s[d]||(s[d]=[]),s[d].push(c)});const n=Object.values(s).map(c=>c.length),o=n.length,i=Math.max(...n),r=this.calculateModularity(t,e),a=Object.entries(s).map(([c,d])=>({id:c,nodes:d,size:d.length,titles:d.map(p=>{const h=this.notes[p];return h?h.title:"Unknown"})}));return{numCommunities:o,largestCommunitySize:i,modularity:r,communities:a,distribution:n}}calculateModularity(t,e){const s=e.length,n=new Set(Object.values(t));return n.size===1||n.size===s?0:Math.min(.8,.3+n.size/s*.5)}findConnectedComponents(t){const e=new Set,s=Object.keys(t);let n=0;const o=i=>{e.add(i),t[i].forEach(r=>{e.has(r)||o(r)})};return s.forEach(i=>{e.has(i)||(o(i),n++)}),n}calculateNetworkDiameter(t){const e=Object.keys(t);let s=0;const n=Math.min(e.length,50);return e.slice(0,n).forEach(i=>{const r=this.bfsDistances(i,t),a=Math.max(...Object.values(r).filter(c=>c!==-1));s=Math.max(s,a)}),s}bfsDistances(t,e){const s={},n=[t];for(Object.keys(e).forEach(o=>{s[o]=-1}),s[t]=0;n.length>0;){const o=n.shift();e[o].forEach(i=>{s[i]===-1&&(s[i]=s[o]+1,n.push(i))})}return s}escapeCsvValue(t){return typeof t!="string"?t:t.replace(/"/g,'""').replace(/\n/g," ").replace(/\r/g,"")}downloadCSV(t,e){const s=new Blob([t],{type:"text/csv;charset=utf-8"}),n=URL.createObjectURL(s),o=document.createElement("a");o.href=n,o.download=e,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(n)}}const x={get:(w,t={})=>{try{return JSON.parse(localStorage.getItem(w))||t}catch{return t}},set:(w,t)=>{localStorage.setItem(w,JSON.stringify(t))}},R=(w,t)=>{let e;return function(...n){const o=()=>{clearTimeout(e),w(...n)};clearTimeout(e),e=setTimeout(o,t)}};class mt{constructor(t,e,s){if(this.toggleButton=document.getElementById(t),this.mainContainer=document.querySelector(e),this.resizablePanes=s,!this.toggleButton||!this.mainContainer){console.error("Sidebar elements not found!");return}this.init()}init(){this.toggleButton.addEventListener("click",()=>this.toggle())}toggle(){this.mainContainer.classList.toggle("right-sidebar-collapsed"),setTimeout(()=>{this.resizablePanes&&typeof this.resizablePanes.update=="function"&&this.resizablePanes.update(),window.dispatchEvent(new Event("resize"))},300)}}class ft{constructor(t,e="",s={},n=null,o=null,i=null){this.onContentChange=null,this.notes=s,this.openNoteCallback=n,this.createNoteCallback=o,this.view=new I({state:J.create({doc:e,extensions:[et(),st(),ot({override:i?[i]:[]}),...n&&o?[rt(s,n,o)]:[],Q.of([...tt,...nt]),I.updateListener.of(r=>{r.docChanged&&this.onContentChange&&this.onContentChange(this.getContent())}),I.lineWrapping]}),parent:t})}getContent(){return this.view.state.doc.toString()}setContent(t){this.view.dispatch({changes:{from:0,to:this.view.state.doc.length,insert:t}})}setOnContentChange(t){this.onContentChange=t}focus(){this.view.focus()}destroy(){this.view.destroy()}}class bt{constructor(){this.notes=this.loadNotes(),this.settings=x.get("pkm_settings",{theme:"light",skipDeleteConfirm:!1,pythonEnabled:!1,rEnabled:!1}),this.sortOrder=x.get("pkm_sort_order","alphabetical"),this.openTabs=x.get("pkm_open_tabs",[]),this.activeTabIndex=x.get("pkm_active_tab_index",-1),this.editorMode=x.get("pkm_editor_mode","split"),this.history=[],this.historyIndex=-1,this.isNavigating=!1,this.backlinksManager=new pt(this.notes),this.graphManager=new gt(this.notes),this.pyodideManager=null,this.webRManager=null,this.codeBlockOutputs=new Map,this.editor=null,this.graphManager.onNodeClick=t=>this.openNote(t),this.md=null,this.setupMarkdownParser(),this.init()}escapeRegExp(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}setupMarkdownParser(){const t=()=>{if(!window.markdownit||!window.hljs){setTimeout(t,100);return}this.initializeMarkdownParser()};t()}initializeMarkdownParser(){const t=s=>{const n=/^\[\[([^|\]\/]+)(?:\|([^\]|]+)(?:\|([^\]]+))?|\/([^\]|]+)(?:\|([^\]]+))?)?\]\]/;function o(i,r){const a=n.exec(i.src.slice(i.pos));if(!a)return!1;const c=a[0],d=a[1].trim(),p=a[2]?a[2].trim():null,h=a[3]?a[3].trim():null,u=a[4]?a[4].trim():null,g=a[5]?a[5].trim():null;let l,m,b,v=null;if(p&&!u)l=d,m=p,b=p,v=h;else if(u){b=d,m=u,v=g;const k=i.env.notes||{},C=Object.values(k).find($=>$.title.toLowerCase()===b.toLowerCase());l=C?C.id:null}else l=d,m=d,b=d;if(!r){const k=i.push("wikilink_open","a",1),C=["wikilink"];v&&C.push(`wikilink-${v}`),k.attrs=[["class",C.join(" ")],["data-link",l||b],["title",`Link to: ${m}${v?` [${v}]`:""}`]],v&&k.attrs.push(["data-decorator",v]);const $=i.push("text","",0);$.content=m,i.push("wikilink_close","a",-1)}return i.pos+=c.length,!0}s.inline.ruler.before("link","wikilink",o),s.renderer.rules.wikilink_open=(i,r,a,c,d)=>{const p=i[r],h=p.attrGet("data-link"),u=p.attrGet("data-decorator");p.attrSet("href","#");const g=c.notes||{},l=g[h]||Object.values(g).find(m=>m.title.toLowerCase()===h.toLowerCase());if(!l)p.attrJoin("class","broken");else{const m=l.title,b=u?` [${u}]`:"";p.attrSet("title",`Link to: ${m}${b}`)}return d.renderToken(i,r,a)}},e=window.markdownit({html:!0,linkify:!0,typographer:!0,tables:!0}).use(t);e.options.highlight=function(s,n){if(n&&window.hljs.getLanguage(n))try{return'<pre class="hljs"><code>'+window.hljs.highlight(s,{language:n,ignoreIllegals:!0}).value+"</code></pre>"}catch{}return'<pre class="hljs"><code>'+e.utils.escapeHtml(s)+"</code></pre>"},this.md=e}bindPyodideStatus(){this.pyodideManager.setStatusCallback((t,e)=>{const s=document.getElementById("pyodideStatus"),n=s.querySelector(".status-text");!s||!n||(s.className="pyodide-status",s.classList.add(t),n.textContent=e)})}bindWebRStatus(){this.webRManager.setStatusCallback((t,e)=>{const s=document.getElementById("webRStatus");if(!s)return;const n=s.querySelector(".status-text");n&&(s.className="webr-status",s.classList.add(t),n.textContent=e)})}loadNotes(){const t=x.get("pkm_notes",{}),e={};return Object.entries(t).forEach(([s,n])=>{const o=new N(n.title,n.content||"");Object.assign(o,n),o.content.startsWith("---")||(o.content=o.generateDefaultContent(o.title)+o.content),e[s]=o}),e}async init(){await this.waitForDependencies(),Object.keys(this.notes).length===0&&(x.get("pkm_has_loaded_before",!1)||(this.notes=await this.createDefaultNotes(),this.saveNotes(),this.backlinksManager.updateNotes(this.notes),this.graphManager.updateNotes(this.notes),x.set("pkm_has_loaded_before",!0))),this.setupTheme(),this.bindGlobalEvents(),this.setupExecutionToggles(),this.renderNoteList(),this.loadInitialEditorState(),this.updateRightSidebar(),new mt("toggle-right-sidebar",".main"),this.showWelcomeModal(),document.addEventListener("click",t=>{t.target.closest(".context-menu")||this.hideContextMenu()}),document.querySelector(".sidebar").addEventListener("contextmenu",t=>{t.target.closest(".note-item")||(t.preventDefault(),this.showContextMenu(t,{type:"sidebar"}))})}async waitForDependencies(){return new Promise(t=>{const e=()=>{window.markdownit&&window.DOMPurify&&window.hljs&&window.d3?t():setTimeout(e,100)};e()})}async createDefaultNotes(){const t={};try{const e=await fetch("content/manifest.json");if(!e.ok)throw new Error(`Failed to fetch manifest.json: ${e.statusText}`);const s=await e.json(),n=(a,c="")=>{let d=[];for(const p in a){const h=a[p];if(Array.isArray(h))h.forEach(u=>{let g,l;p==="root"?(g=u,l="root"):(g=c?`${c}${p}/${u}`:`${p}/${u}`,l=c?`${c}${p}`:p),d.push({filePath:g,folder:l})});else if(typeof h=="object"&&h!==null){const u=c?`${c}${p}/`:`${p}/`;d=d.concat(n(h,u))}}return d},o=n(s.defaultNotes);if(!o||o.length===0)return{};const i=o.map(a=>fetch(`content/${a.filePath}`).then(c=>c.ok?c.text().then(d=>({content:d,fileInfo:a,error:!1})):{content:`# Error: ${c.statusText}`,fileInfo:a,error:!0}).catch(c=>({content:`# Network Error: ${c.message}`,fileInfo:a,error:!0})));(await Promise.all(i)).forEach(a=>{const{content:c,fileInfo:d,error:p}=a;let h=d.filePath.split("/").pop().replace(/\.(md|txt)$/i,"");if(!p){const g=c.match(/^---\n([\s\S]*?)\n---/);if(g){const l=g[1].match(/^title:\s*(.+)$/m);l&&(h=l[1].replace(/^['"]|['"]$/g,"").trim())}}const u=new N(h,c);u.folder=d.folder,t[u.id]=u})}catch(e){console.error("Error creating default notes:",e);const s=new N("Error Loading Notes",`Error: ${e.message}`);s.folder="root",t[s.id]=s}return t}setupTheme(){document.documentElement.setAttribute("data-theme",this.settings.theme)}updateHistoryButtons(){const t=document.getElementById("backBtn"),e=document.getElementById("forwardBtn");!t||!e||(t.disabled=this.historyIndex<=0,e.disabled=this.historyIndex>=this.history.length-1)}addHistoryEntry(t){if(this.isNavigating)return;const e=this.history[this.historyIndex];e&&e.noteId===t||(this.historyIndex<this.history.length-1&&(this.history=this.history.slice(0,this.historyIndex+1)),this.history.push({noteId:t}),this.historyIndex=this.history.length-1,this.updateHistoryButtons())}navigateBack(){if(this.historyIndex>0){this.isNavigating=!0,this.historyIndex--;const t=this.history[this.historyIndex];this.openNote(t.noteId,!1),this.isNavigating=!1,this.updateHistoryButtons()}}navigateForward(){if(this.historyIndex<this.history.length-1){this.isNavigating=!0,this.historyIndex++;const t=this.history[this.historyIndex];this.openNote(t.noteId,!1),this.isNavigating=!1,this.updateHistoryButtons()}}bindGlobalEvents(){document.getElementById("newNoteBtn").addEventListener("click",()=>this.createNote()),document.getElementById("backBtn").addEventListener("click",()=>this.navigateBack()),document.getElementById("forwardBtn").addEventListener("click",()=>this.navigateForward()),document.getElementById("themeBtn").addEventListener("click",()=>this.toggleTheme()),document.getElementById("importBtn").addEventListener("click",()=>this.importFiles()),document.getElementById("exportBtn").addEventListener("click",()=>this.exportNotes()),document.getElementById("searchInput").addEventListener("input",R(t=>this.searchNotes(t.target.value),300)),document.getElementById("fileInput").addEventListener("change",t=>this.handleFileImport(t)),document.getElementById("noteListHeader").addEventListener("contextmenu",t=>{t.preventDefault(),t.stopPropagation(),this.showContextMenu(t,{type:"header"})})}setupExecutionToggles(){const t=document.getElementById("python-toggle"),e=document.getElementById("r-toggle");t.checked=this.settings.pythonEnabled,e.checked=this.settings.rEnabled,this.settings.pythonEnabled&&this.initializePyodide(),this.settings.rEnabled&&this.initializeWebR(),t.addEventListener("change",s=>{this.settings.pythonEnabled=s.target.checked,this.saveSettings(),s.target.checked?this.initializePyodide():(this.pyodideManager=null,this.updatePyodideStatus("disabled","Disabled"))}),e.addEventListener("change",s=>{this.settings.rEnabled=s.target.checked,this.saveSettings(),s.target.checked?this.initializeWebR():(this.webRManager=null,this.updateWebRStatus("disabled","Disabled"))})}initializePyodide(){if(this.pyodideManager||window.loadPyodide)return;this.updatePyodideStatus("loading","Loading...");const t=document.createElement("script");t.src="https://cdn.jsdelivr.net/pyodide/v0.25.1/full/pyodide.js",t.onload=()=>{this.pyodideManager=new ct,this.bindPyodideStatus()},t.onerror=()=>{this.updatePyodideStatus("error","Load Failed")},document.head.appendChild(t)}initializeWebR(){this.webRManager||(this.updateWebRStatus("loading","Loading..."),this.webRManager=new ht,this.bindWebRStatus())}updatePyodideStatus(t,e){const s=document.getElementById("pyodideStatus"),n=s.querySelector(".status-text");!s||!n||(s.className="pyodide-status",s.classList.add(t),n.textContent=e)}updateWebRStatus(t,e){const s=document.getElementById("webRStatus"),n=s.querySelector(".status-text");!s||!n||(s.className="webr-status",s.classList.add(t),n.textContent=e)}loadInitialEditorState(){if(this.openTabs.length>0&&this.activeTabIndex>-1)this.renderEditor();else if(Object.keys(this.notes).length>0){const t=Object.values(this.notes).sort((e,s)=>s.modified-e.modified);t[0]&&this.openNote(t[0].id)}else{const t=document.getElementById("editorPanesContainer");t.innerHTML='<div class="empty-state"><h3>Welcome</h3><p>Select a note or create a new one.</p></div>'}}openNote(t,e=!0){const s=this.openTabs.findIndex(n=>n===t);s>-1?this.activeTabIndex=s:(this.openTabs.push(t),this.activeTabIndex=this.openTabs.length-1),e&&this.addHistoryEntry(t),this.renderEditor(),this.updateActiveNoteInSidebar(),this.updateRightSidebar(),this.saveTabsState()}closeTab(t){this.openTabs.splice(t,1),this.activeTabIndex>=t&&this.activeTabIndex>0?this.activeTabIndex--:this.openTabs.length===0?this.activeTabIndex=-1:this.activeTabIndex>=this.openTabs.length&&(this.activeTabIndex=this.openTabs.length-1),this.renderEditor(),this.updateActiveNoteInSidebar(),this.updateRightSidebar(),this.saveTabsState()}createNote(){const t=new N;this.notes[t.id]=t,this.backlinksManager.updateNotes(this.notes),this.graphManager.updateNotes(this.notes),this.saveNotes(),this.renderNoteList(),this.openNote(t.id)}createNoteWithTitle(t){const e=Object.values(this.notes).find(n=>n.title.toLowerCase()===t.toLowerCase());if(e){this.openNote(e.id);return}const s=new N(t);this.notes[s.id]=s,this.backlinksManager.updateNotes(this.notes),this.graphManager.updateNotes(this.notes),this.saveNotes(),this.renderNoteList(),this.openNote(s.id)}saveTabsState(){x.set("pkm_open_tabs",this.openTabs),x.set("pkm_active_tab_index",this.activeTabIndex)}async deleteNote(t,e={}){let s=!0,n=!1;if(!this.settings.skipDeleteConfirm||e&&e.shiftKey){const i=this.notes[t]?.title||"this note",r=await this._showConfirmationModal({title:"Delete Note?",message:`Permanently delete "${i}"? This cannot be undone.`,confirmText:"Delete",confirmClass:"danger",showSkipCheckbox:!0});s=r.confirmed,n=r.skipFuture}if(!s)return;n&&(this.settings.skipDeleteConfirm=!0,this.saveSettings());const o=this.openTabs.findIndex(i=>i===t);o>-1&&this.closeTab(o),delete this.notes[t],this.backlinksManager.updateNotes(this.notes),this.graphManager.updateNotes(this.notes),this.saveNotes(),this.renderNoteList(),this.updateRightSidebar()}moveNote(t){const e=this.notes[t];if(!e)return;const s=e.folder||"root",n=prompt(`Move "${e.title}" to which folder?`,s);n===null||n.trim()===s||(e.folder=n.trim()||"root",e.modified=Date.now(),this.saveNotes(),this.renderNoteList())}createFolder(){const t=prompt("Enter new folder name (e.g., 'Projects/Web'):");if(!t||t.trim().length===0)return;const e=new N("Untitled");e.folder=t.trim(),this.notes[e.id]=e,this.backlinksManager.updateNotes(this.notes),this.graphManager.updateNotes(this.notes),this.saveNotes(),this.renderNoteList(),this.openNote(e.id)}_showConfirmationModal(t){return new Promise(e=>{const{title:s="Confirm",message:n="Are you sure?",confirmText:o="OK",cancelText:i="Cancel",confirmClass:r="primary",showSkipCheckbox:a=!1}=t,c=document.createElement("div");c.className="confirm-overlay";let d=a?`
                <div class="confirm-modal-skip">
                    <label><input type="checkbox" id="confirmSkipCheckbox"> Don't ask again</label>
                </div>`:"";c.innerHTML=`
                <div class="confirm-modal">
                    <div class="confirm-modal-header">${s}</div>
                    <div class="confirm-modal-body">${n}${d}</div>
                    <div class="confirm-modal-footer">
                        <button class="confirm-btn secondary" id="confirmCancelBtn">${i}</button>
                        <button class="confirm-btn ${r}" id="confirmOkBtn">${o}</button>
                    </div>
                </div>`,document.body.appendChild(c);const p=document.getElementById("confirmOkBtn"),h=document.getElementById("confirmCancelBtn"),u=document.getElementById("confirmSkipCheckbox"),g=()=>c.remove(),l=()=>{g(),e({confirmed:!0,skipFuture:u?u.checked:!1})},m=()=>{g(),e({confirmed:!1,skipFuture:!1})};p.addEventListener("click",l),h.addEventListener("click",m)})}renderEditor(){const t=document.getElementById("editorPanesContainer");if(this.activeTabIndex===-1||this.openTabs.length===0){t.innerHTML='<div class="empty-state"><h3>Welcome</h3><p>Select a note or create one.</p></div>',this.editor&&(this.editor.destroy(),this.editor=null);return}const e=this.openTabs[this.activeTabIndex],s=this.notes[e];if(!s){this.closeTab(this.activeTabIndex);return}const n=this.openTabs.map((o,i)=>{const r=this.notes[o];return r?`<div class="editor-tab ${i===this.activeTabIndex?"active":""}" data-index="${i}">
                        <span>${r.title}</span>
                        <button class="tab-close-btn" data-index="${i}">√ó</button>
                    </div>`:""}).join("");if(this.editor)t.querySelector(".editor-tabs").innerHTML=n,this.editor.setContent(this.convertToDisplayFormat(s.content));else{t.innerHTML=`
                <div class="editor-container">
                    <div class="editor-tabs">${n}</div>
                    ${this.getEditorHTML(s)}
                </div>`;const o=t.querySelector(".codemirror-container");this.editor=new ft(o,this.convertToDisplayFormat(s.content),this.notes,i=>this.openNote(i),i=>this.createNoteWithTitle(i),this.createWikiLinkCompletion()),this.editor.setOnContentChange(R(()=>{const i=this.notes[this.openTabs[this.activeTabIndex]];i&&(this.saveActiveNote(),this.updatePanePreview(t.querySelector(".editor-container"),i))},500)),this.bindEditorEvents()}this.updateEditorHeaderAndPreview(s),this.bindTabEvents()}saveActiveNote(){if(!this.editor||this.activeTabIndex===-1)return;const t=this.openTabs[this.activeTabIndex],e=this.notes[t];if(!e)return;const s=this.convertToInternalFormat(this.editor.getContent());if(e.content!==s){const n=e.title;e.update(s,!0),n!==e.title?(this.handleNoteRename(e,n),this.renderNoteList(),this.renderEditor()):(this.saveNotes(),this.backlinksManager.updateNotes(this.notes),this.graphManager.updateNotes(this.notes),this.updateRightSidebar())}}bindTabEvents(){const t=document.getElementById("editorPanesContainer");t.querySelectorAll(".editor-tab").forEach(e=>{e.addEventListener("click",s=>{if(s.target.classList.contains("tab-close-btn"))return;const n=parseInt(e.dataset.index,10);this.activeTabIndex!==n&&(this.saveActiveNote(),this.activeTabIndex=n,this.renderEditor(),this.updateActiveNoteInSidebar(),this.updateRightSidebar(),this.saveTabsState())})}),t.querySelectorAll(".tab-close-btn").forEach(e=>{e.addEventListener("click",s=>{s.stopPropagation();const n=parseInt(e.dataset.index,10);this.closeTab(n)})})}updateEditorHeaderAndPreview(t){const s=document.getElementById("editorPanesContainer").querySelector(".editor-container");s&&(s.querySelector(".editor-title").textContent=t.title,this.updatePanePreview(s,t))}getEditorHTML(t){const e=this.editorMode;return`
            <div class="editor-header">
                <div class="editor-title-wrapper">
                    <div class="editor-title" title="${t.title}">${t.title}</div>
                </div>
                <div class="editor-modes">
                    <button class="mode-btn ${e==="edit"?"active":""}" data-mode="edit">Edit</button>
                    <button class="mode-btn ${e==="split"?"active":""}" data-mode="split">Split</button>
                    <button class="mode-btn ${e==="preview"?"active":""}" data-mode="preview">Preview</button>
                </div>
            </div>
            <div class="editor-content ${e}-mode">
                <div class="editor-pane"><div class="codemirror-container"></div></div>
                <div class="preview-pane"><div class="preview-content"></div></div>
            </div>
            <div class="status-bar"><span class="save-status">Saved</span></div>`}bindEditorEvents(){const t=document.querySelector(".editor-container");t&&t.querySelectorAll(".mode-btn").forEach(e=>{e.addEventListener("click",s=>{s.stopPropagation(),this.editorMode=e.dataset.mode,x.set("pkm_editor_mode",this.editorMode),t.querySelectorAll(".mode-btn").forEach(o=>o.classList.remove("active")),e.classList.add("active");const n=t.querySelector(".editor-content");n.className=`editor-content ${this.editorMode}-mode`})})}updatePanePreview(t,e){const s=t.querySelector(".preview-content");if(!s)return;let n=e.getContentWithoutMetadata();n=n.replace(/!\[\[([^#\]|]+)(\|([^\]]+))?#\^([^\]]+)\]\]/g,(p,h,u,g,l)=>{const m=Object.values(this.notes).find(b=>b.title.toLowerCase()===h.trim().toLowerCase());if(m){const b=m.getBlockContent(l.trim());if(b){const v=g||h;return`<div class="embedded-block">${this.md.render(b)}<div class="embedded-block-source">From: <span class="wikilink" data-link="${m.id}">${v}</span></div></div>`}return`<div class="broken-embed">Block <code>^${l}</code> not found in "${h}"</div>`}return`<div class="broken-embed">Note "${h}" not found</div>`});const o=/(```(?:python|r|R)\n[\s\S]*?\n```)/g,i=n.split(o);let r=0;const c=i.map(p=>{const h=p.startsWith("```python"),u=p.startsWith("```r")||p.startsWith("```R");if(h||u){const g=h?"python":"r",l=h?"PYTHON":"R",m="run-btn",b=p.replace(/^```(?:python|r|R)\n/,"").replace(/\n```$/,""),v=`code-${e.id}-${r}`,k=this.escapeHtml(b),$=(this.codeBlockOutputs.get(e.id)||new Map).get(r)||"",E=`<div class="code-container" id="${v}" data-lang="${g}">
                        <div class="code-header"><span>${l}</span><button class="${m}">‚ñ∂ Run</button></div>
                        <pre><code class="language-${g}">${k}</code></pre>
                        <div class="code-output">${$}</div>
                    </div>`;return r++,E}else return this.md.render(p,{notes:this.notes})}).join("");if(!window.DOMPurify){console.error("DOMPurify not loaded."),s.textContent="Error: Preview renderer not loaded.";return}const d=window.DOMPurify.sanitize(c,{ADD_CLASSES:["wikilink","broken","embedded-block","embedded-block-source","code-container","code-header","run-btn","code-output","language-python","language-r","output-error","spinner","hljs"]});s.innerHTML=d,this.bindPreviewEvents(t,e)}async handleNoteRename(t,e){const s=t.id,n=t.title,o=Object.values(this.notes).filter(i=>i.id!==s&&(i.content.includes(`[[${s}|`)||i.content.toLowerCase().includes(`![[${e.toLowerCase()}#`)));if(o.length>0){const i=new RegExp(`\\[\\[(${s})\\|([^\\]]+)\\]\\]`,"g"),r=new RegExp(`(!\\[\\[)(${this.escapeRegExp(e)})(#\\^.*?\\]\\])`,"gi");o.forEach(a=>{let c=a.content,d=!1;c=c.replace(i,(p,h,u)=>u.trim().toLowerCase()===e.trim().toLowerCase()?(d=!0,`[[${h}|${n}]]`):p),r.test(c)&&(c=c.replace(r,`$1${n}$3`),d=!0),d&&a.update(c,!1)})}this.saveNotes(),this.backlinksManager.updateNotes(this.notes),this.graphManager.updateNotes(this.notes),this.updateRightSidebar()}base64ToBlob(t,e="image/png"){const s=atob(t),n=[];for(let o=0;o<s.length;o+=512){const i=s.slice(o,o+512),r=new Array(i.length);for(let a=0;a<i.length;a++)r[a]=i.charCodeAt(a);n.push(new Uint8Array(r))}return new Blob(n,{type:e})}async copyTextToClipboard(t,e){try{await navigator.clipboard.writeText(t),e&&(e.textContent="Copied!")}catch(s){console.warn("Clipboard API failed, falling back.",s);const n=document.createElement("textarea");n.value=t,n.style.position="fixed",n.style.opacity="0",document.body.appendChild(n),n.select();try{document.execCommand("copy")&&e&&(e.textContent="Copied!")}catch{e&&(e.textContent="Error")}document.body.removeChild(n)}finally{e&&setTimeout(()=>{e.classList.contains("copy-output-btn")?e.textContent="Copy":e.classList.contains("copy-plot-btn")&&(e.textContent="Copy Image")},2e3)}}bindPreviewEvents(t,e){let s=0;t.querySelectorAll(".code-container").forEach(n=>{const o=s++,i=n.dataset.lang,r=n.querySelector(".run-btn");if(!r)return;const a=r.cloneNode(!0);r.parentNode.replaceChild(a,r),a.addEventListener("click",async c=>{const d=n.querySelector(`code.language-${i}`),p=n.querySelector(".code-output");if(!d){p.innerHTML='<pre class="output-error">No code found</pre>';return}const h=d.textContent;if(i==="python"&&!this.pyodideManager){p.innerHTML='<pre class="output-error">Python environment is not enabled. Use the üêç toggle to enable it.</pre>';return}if(i==="r"&&!this.webRManager){p.innerHTML='<pre class="output-error">R environment is not enabled. Use the ¬ÆÔ∏è toggle to enable it.</pre>';return}p.innerHTML='<div class="spinner">‚è≥ Executing...</div>',a.disabled=!0,a.textContent="‚è≥ Running...";try{let u;const g=this.codeBlockOutputs.get(e.id)||new Map;if(i==="python"){const l=await this.pyodideManager.executeCode(h,e.id,o);u=this.pyodideManager.formatOutput(l.result,l.stdout,l.executionNumber,l.plots)}else if(i==="r"){const l=await this.webRManager.executeCode(h);u=this.webRManager.formatOutput(l)}u&&(p.innerHTML=u.html,g.set(o,u.html),this.codeBlockOutputs.set(e.id,g),p.addEventListener("click",async l=>{const m=l.target;if(m.matches(".copy-output-btn"))this.copyTextToClipboard(u.rawText||"",m);else if(m.matches(".copy-plot-btn")){const b=m.dataset.plotBase64;try{const v=this.base64ToBlob(b);await navigator.clipboard.write([new ClipboardItem({"image/png":v})]),m.textContent="Copied!",setTimeout(()=>{m.textContent="Copy Image"},2e3)}catch(v){console.error("Failed to copy image:",v),m.textContent="Error!"}}else if(m.matches(".download-plot-btn")){const b=document.createElement("a");b.href=URL.createObjectURL(this.base64ToBlob(m.dataset.plotBase64)),b.download=m.dataset.filename,b.click()}}))}catch(u){let g=u.message||u.toString();p.innerHTML=`<pre class="output-error">${this.escapeHtml(g)}</pre>`;const l=this.codeBlockOutputs.get(e.id)||new Map;l.set(o,p.innerHTML),this.codeBlockOutputs.set(e.id,l)}finally{a.disabled=!1,a.textContent="‚ñ∂ Run"}})}),t.querySelectorAll(".wikilink").forEach(n=>{n.addEventListener("click",o=>{o.preventDefault(),o.stopPropagation();const i=n.dataset.link,r=this.notes[i]||Object.values(this.notes).find(a=>a.title.toLowerCase()===i.toLowerCase());r?this.openNote(r.id):i&&this.createNoteWithTitle(i)})})}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}updateRightSidebar(){const t=document.getElementById("rightSidebar").querySelector(".right-sidebar-content"),e=this.activeTabIndex>-1?this.openTabs[this.activeTabIndex]:null;if(!e||!this.notes[e]){t.innerHTML='<div class="empty-sidebar"><p>No note selected.</p></div>';return}const s=this.notes[e],n=s.getContentWithoutMetadata(),o=n.trim()?n.trim().split(/\s+/).length:0,i=this.backlinksManager.getBacklinks(s.title);let r=i.length>0?`<div class="backlinks-list">
            ${i.map(a=>`
                <div class="backlink-item" data-note-id="${a.noteId}">
                    <div class="backlink-title">${a.noteTitle}</div>
                    <div class="backlink-context">${a.context}</div>
                </div>`).join("")}
            </div>`:'<div class="word-count-display">No backlinks to this note.</div>';t.innerHTML=`
            <div class="sidebar-section">
                <div class="sidebar-section-header">Word Count</div>
                <div class="word-count-display">${o} words</div>
            </div>
            <div class="sidebar-section">
                <div class="sidebar-section-header">
                    Link Graph
                    <button class="btn" id="exportGraphBtn" style="float: right; padding: 2px 6px; font-size: 10px;">Export CSV</button>
                </div>
                <div class="graph-container" id="graphContainer"></div>
            </div>
            <div class="sidebar-section">
                <div class="sidebar-section-header">Backlinks</div>
                ${r}
            </div>
        `,this.graphManager.createGraph(t.querySelector("#graphContainer"),s.id,1),t.querySelector("#exportGraphBtn").addEventListener("click",a=>{a.stopPropagation(),this.exportNetworkData(s.id)}),t.querySelectorAll(".backlink-item").forEach(a=>{a.addEventListener("click",c=>{c.stopPropagation(),this.openNote(a.dataset.noteId)})})}exportNetworkData(t){const e=document.createElement("div");e.className="context-menu",Object.assign(e.style,{position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",zIndex:"10000"}),e.innerHTML=`
            <div style="padding: 8px 0; font-weight: 600; border-bottom: 1px solid var(--border); margin-bottom: 8px;">Export Options</div>
            <button class="context-menu-item" data-action="export-complete">üåê Complete Network</button>
            <button class="context-menu-item" data-action="export-ego">üéØ Current View Network</button>
            <div class="context-menu-separator"></div>
            <button class="context-menu-item" data-action="cancel">‚ùå Cancel</button>
        `,document.body.appendChild(e);const s=()=>e.remove();e.querySelector('[data-action="export-complete"]').addEventListener("click",()=>{this.performNetworkExport(t,!0),s()}),e.querySelector('[data-action="export-ego"]').addEventListener("click",()=>{this.performNetworkExport(t,!1),s()}),e.querySelector('[data-action="cancel"]').addEventListener("click",s)}performNetworkExport(t,e=!0){const s=e?null:this.graphManager.currentSteps,n=this.graphManager.exportNetworkCSV(t,!0,e,!0,s);if(!n)return;const o=this.notes[t],i=new Date().toISOString().split("T"),r=o.title.replace(/[^a-z0-9]/gi,"_").toLowerCase(),a=e?"complete":`ego_${s}step${s>1?"s":""}`;this.graphManager.downloadCSV(n.edgesCSV,`${r}_${a}_edges_${i}.csv`),setTimeout(()=>this.graphManager.downloadCSV(n.nodesCSV,`${r}_${a}_nodes_${i}.csv`),100),setTimeout(()=>this.graphManager.downloadCSV(n.statsCSV,`${r}_${a}_stats_${i}.csv`),200),n.isolatedCSV&&e&&setTimeout(()=>this.graphManager.downloadCSV(n.isolatedCSV,`${r}_isolated_notes_${i}.csv`),300)}setSortOrder(t){this.sortOrder=t,x.set("pkm_sort_order",this.sortOrder),this.renderNoteList()}renderNoteList(){const t=document.getElementById("noteList"),e=Object.values(this.notes);switch(this.sortOrder){case"alphabetical":e.sort((a,c)=>a.title.localeCompare(c.title));break;case"modified-asc":e.sort((a,c)=>a.modified-c.modified);break;default:e.sort((a,c)=>c.modified-a.modified);break}const s={_notes:[],_children:{}};e.forEach(a=>{const c=a.folder||"root";if(c==="root"){s._notes.push(a);return}let d=s._children;c.split("/").forEach((p,h,u)=>{d[p]||(d[p]={_notes:[],_children:{}}),h===u.length-1?d[p]._notes.push(a):d=d[p]._children})});const n=a=>`<div class="note-item" data-note-id="${a.id}"><div class="note-title">${a.title}</div><div class="note-preview">${a.getPreview()}</div></div>`,o=a=>a._notes.length+Object.values(a._children).reduce((c,d)=>c+o(d),0),i=(a,c)=>{const d=o(c);if(d===0)return"";let p=c._notes.map(n).join("");for(const h of Object.keys(c._children).sort())p+=i(h,c._children[h]);return`<div class="folder-item"><div class="folder-header"><span class="folder-arrow">‚ñ∂</span><span class="folder-name">${a}</span><span class="folder-count">${d}</span></div><div class="folder-contents" style="display: none;">${p}</div></div>`};let r=s._notes.map(n).join("");for(const a of Object.keys(s._children).sort())r+=i(a,s._children[a]);t.innerHTML=r,t.querySelectorAll(".note-item").forEach(a=>{a.addEventListener("click",()=>this.openNote(a.dataset.noteId)),a.addEventListener("contextmenu",c=>{c.preventDefault(),this.showContextMenu(c,{type:"note",noteId:a.dataset.noteId})})}),t.querySelectorAll(".folder-header").forEach(a=>{a.addEventListener("click",c=>{c.stopPropagation();const d=a.nextElementSibling,p=d.style.display==="block";d.style.display=p?"none":"block",a.querySelector(".folder-arrow").textContent=p?"‚ñ∂":"‚ñº"})}),this.updateActiveNoteInSidebar()}updateActiveNoteInSidebar(){requestAnimationFrame(()=>{if(document.querySelectorAll(".note-item.active").forEach(t=>t.classList.remove("active")),this.activeTabIndex>-1){const t=this.openTabs[this.activeTabIndex],e=document.querySelector(`.note-item[data-note-id="${t}"]`);e&&e.classList.add("active")}})}showContextMenu(t,e={}){this.hideContextMenu();const s=document.createElement("div");s.id="context-menu",s.className="context-menu";let n="";const o=i=>this.sortOrder===i?"‚úî ":"";switch(e.type){case"note":const i=e.noteId;n=`
                    <div class="context-menu-title">Actions for ${this.notes[i]?`"${this.notes[i].title}"`:"Note"}</div>
                    <button class="context-menu-item" data-action="open" data-note-id="${i}">üìÇ Open</button>
                    <button class="context-menu-item" data-action="move-note" data-note-id="${i}">‚Ü¶ Move...</button>
                    <div class="context-menu-separator"></div>
                    <button class="context-menu-item" data-action="delete" data-note-id="${i}">üóëÔ∏è Delete Note</button>
                `;break;case"sidebar":n=`
                    <button class="context-menu-item" data-action="new-note">üìù New Note</button>
                    <button class="context-menu-item" data-action="new-folder">üìÅ New Folder...</button>
                    <div class="context-menu-separator"></div>
                    <div class="context-menu-title">Sort Notes By</div>
                    <button class="context-menu-item" data-sort="alphabetical">${o("alphabetical")}Alphabetical</button>
                    <button class="context-menu-item" data-sort="modified-desc">${o("modified-desc")}Most Recent</button>
                    <button class="context-menu-item" data-sort="modified-asc">${o("modified-asc")}Oldest</button>
                `;break;default:n=`
                    <div class="context-menu-title">Sort Notes By</div>
                    <button class="context-menu-item" data-sort="alphabetical">${o("alphabetical")}Alphabetical</button>
                    <button class="context-menu-item" data-sort="modified-desc">${o("modified-desc")}Most Recent</button>
                    <button class="context-menu-item" data-sort="modified-asc">${o("modified-asc")}Oldest</button>
                    <div class="context-menu-separator"></div>
                    <button class="context-menu-item" data-action="new-note">üìù New Note</button>
                `;break}s.innerHTML=n,document.body.appendChild(s),s.style.top=`${t.clientY}px`,s.style.left=`${t.clientX}px`,s.addEventListener("click",i=>{const r=i.target.closest("button.context-menu-item");if(!r)return;const{action:a,sort:c,noteId:d}=r.dataset;switch(c&&this.setSortOrder(c),a){case"new-note":this.createNote();break;case"new-folder":this.createFolder();break;case"open":this.openNote(d);break;case"move-note":this.moveNote(d);break;case"delete":this.deleteNote(d,i);break}this.hideContextMenu()})}hideContextMenu(){const t=document.getElementById("context-menu");t&&t.remove()}searchNotes(t){const s=document.getElementById("noteList").querySelectorAll(".note-item"),n=t.toLowerCase().trim();s.forEach(o=>{if(!n){o.style.display="block";return}const i=this.notes[o.dataset.noteId],r=i.title.toLowerCase().includes(n)||i.content.toLowerCase().includes(n);o.style.display=r?"block":"none"})}saveNotes(){x.set("pkm_notes",this.notes)}saveSettings(){x.set("pkm_settings",this.settings)}importFiles(){document.getElementById("fileInput").click()}exportNotes(){const t=document.createElement("div");t.className="context-menu",Object.assign(t.style,{position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",zIndex:"10000"}),t.innerHTML=`
            <div style="padding: 8px 0; font-weight: 600; border-bottom: 1px solid var(--border); margin-bottom: 8px;">Export Options</div>
            <button class="context-menu-item" data-action="export-json">üìÑ Export as JSON</button>
            <button class="context-menu-item" data-action="export-markdown">üìù Export as Markdown Files</button>
            <button class="context-menu-item" data-action="export-single-md">üìã Export as Single Markdown</button>
            <div class="context-menu-separator"></div>
            <button class="context-menu-item" data-action="cancel">‚ùå Cancel</button>
        `,document.body.appendChild(t);const e=()=>t.remove();t.querySelector('[data-action="export-json"]').addEventListener("click",()=>{this.exportAsJSON(),e()}),t.querySelector('[data-action="export-markdown"]').addEventListener("click",()=>{this.exportAsMarkdownFiles(),e()}),t.querySelector('[data-action="export-single-md"]').addEventListener("click",()=>{this.exportAsSingleMarkdown(),e()}),t.querySelector('[data-action="cancel"]').addEventListener("click",e)}exportAsJSON(){const t=JSON.stringify({notes:this.notes,exported:new Date().toISOString()},null,2);this.downloadFile(t,`pkm-notes-${new Date().toISOString().split("T")[0]}.json`,"application/json")}exportAsMarkdownFiles(){Object.keys(this.notes).length!==0&&Object.values(this.notes).forEach((t,e)=>{setTimeout(()=>{const s=t.title.replace(/[^a-z0-9]/gi,"_").toLowerCase();this.downloadFile(t.content,`${s}.md`,"text/markdown")},e*100)})}exportAsSingleMarkdown(){if(Object.keys(this.notes).length===0)return;const t=Object.values(this.notes).sort((s,n)=>n.modified-s.modified);let e=`# PKM Notes Export

Exported on: ${new Date().toLocaleString()}

---

`;t.forEach(s=>{e+=`# ${s.title}

*Created: ${new Date(s.created).toLocaleString()}*
*Modified: ${new Date(s.modified).toLocaleString()}*

${s.getContentWithoutMetadata()}

---

`}),this.downloadFile(e,`pkm-notes-combined-${new Date().toISOString().split("T")[0]}.md`,"text/markdown")}downloadFile(t,e,s){const n=new Blob([t],{type:s}),o=document.createElement("a");o.href=URL.createObjectURL(n),o.download=e,o.click(),URL.revokeObjectURL(o.href)}async handleFileImport(t){const e=t.target.files;if(!e)return;const s=Array.from(e).map(n=>new Promise((o,i)=>{if(n.type.startsWith("text/")||n.name.endsWith(".md")){const r=new FileReader;r.onload=a=>{try{const c=a.target.result;let d=n.name.replace(/\.(md|txt)$/i,"");const p=c.match(/^---\n([\s\S]*?)\n---/);if(p){const u=p.match(/^title:\s*(.+)$/m);u&&(d=u[1].replace(/^['"]|['"]$/g,"").trim())}const h=new N(d,c);this.notes[h.id]=h,o()}catch(c){i(c)}},r.onerror=()=>{i(new Error(`Failed to read file: ${n.name}`))},r.readAsText(n)}else o()}));try{await Promise.all(s),this.backlinksManager.updateNotes(this.notes),this.graphManager.updateNotes(this.notes),this.saveNotes(),this.renderNoteList(),this.updateRightSidebar()}catch(n){console.error("An error occurred during file import:",n)}t.target.value=""}createWikiLinkCompletion(){return t=>{const e=t.matchBefore(/\[\[([^\]]*)$/);if(!e)return null;const s=e.text.slice(2).toLowerCase(),n=Object.values(this.notes).filter(o=>o.title.toLowerCase().includes(s)).map(o=>({label:`[[${o.title}]]`,type:"text",apply:`[[${o.title}]]`}));return s.length>0&&n.push({label:`[[${s}]] (create new)`,type:"text",apply:`[[${s}]]`}),{from:e.from,options:n}}}toggleTheme(){this.settings.theme=this.settings.theme==="light"?"dark":"light",this.saveSettings(),this.setupTheme()}convertToDisplayFormat(t){return t.replace(/\[\[([^|\]]+)\|([^\]]+)\]\]/g,(e,s,n)=>{const o=this.notes[s];return o?n!==o.title?`[[${o.title}/${n}]]`:`[[${n}]]`:e})}convertToInternalFormat(t){const e=Object.values(this.notes).reduce((s,n)=>(s[n.title.toLowerCase()]=n.id,s),{});return t.replace(/\[\[([^|\]\/]+)(?:\/([^\]]+))?\]\]/g,(s,n,o)=>{const i=n.trim(),r=e[i.toLowerCase()];if(r){const a=(o||"").trim();return`[[${r}|${a||i}]]`}return s})}showWelcomeModal(){if(x.get("pkm_seen_welcome",!1))return;const e=document.createElement("div");e.className="welcome-modal",e.innerHTML=`
           <div class="welcome-overlay"></div>
            <div class="welcome-modal-content">
                <div class="welcome-header">
                    <h2>Welcome to PKM WebNotes! üìù</h2>
                    <button class="welcome-close-btn">√ó</button>
                </div>
                <div class="welcome-body">
                    <p>This is a lightweight, web-based personal knowledge management tool.</p>
                    <h4>Key Features:</h4>
                    <ul>
                        <li><b>Tabbed Interface:</b> Open and manage multiple notes in tabs.</li>
                        <li><b>Markdown Editor:</b> Real-time preview with syntax highlighting.</li>
                        <li><b>Wikilinks:</b> Create connections between notes using <code>[[Note Title]]</code>.</li>
                        <li><b>Aliases for Links:</b> Create aliases for displayed link text using <code> [[Note Title/Display Text]]</code>.</li>
                        <li><b>Backlinks Panel:</b> See all notes that link to your current note.</li>
                        <li><b>Code Execution:</b> Run Python code blocks directly within your notes via the Preview window.</li>
                        <li><b>Graph View:</b> Visualize the connections between your notes.</li>
                        <li><b>Local Storage:</b> Everything is saved directly in your browser.</li>
                        <li><b>Portability:</b> Your notes and the graph of your linked thought can be exported as .md and .csv.</li>
                    </ul>
                </div>
                <div class="welcome-footer">
                    <button class="btn btn-primary" id="welcomeGotItBtn">Got it!</button>
                    <label class="welcome-checkbox">
                        <input type="checkbox" id="welcomeDontShow"> Don't show this again
                    </label>
                </div>
            </div>
        `,document.body.appendChild(e);const s=()=>{e.querySelector("#welcomeDontShow").checked&&x.set("pkm_seen_welcome",!0),e.remove()};e.querySelector(".welcome-close-btn").addEventListener("click",s),e.querySelector("#welcomeGotItBtn").addEventListener("click",s),e.querySelector(".welcome-overlay").addEventListener("click",s)}}document.addEventListener("DOMContentLoaded",()=>{window.app=new bt});
